/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'com.github.johnrengelman.shadow' version '7.0.0'
    id "com.diffplug.spotless" version "5.14.2"
}

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'eclipse'

description = "Demo for Flink Forward Global 2021"

group = 'com.ververica'
version = '0.2'
mainClassName = 'com.ververica.flink.example.datausage.KafkaProducerJob' // default job to run

ext {
    javaVersion = '1.8'
    flinkVersion = '1.14.0'
    scalaBinaryVersion = '2.12'
    jacksonVersion = '2.11.2'
    log4jVersion = '2.12.1'
    junitVersion = '4.13'
}

sourceCompatibility = javaVersion
targetCompatibility = javaVersion
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

// declare where to find the dependencies of your project
repositories {
    // for access from China, you may need to uncomment this line
    // maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
    mavenCentral()
    maven {
        url "https://repository.apache.org/content/repositories/snapshots/"
        mavenContent {
            snapshotsOnly()
        }
    }
    maven { url 'https://jitpack.io' }
}

// common set of dependencies
dependencies {
    shadow "org.apache.logging.log4j:log4j-slf4j-impl:${log4jVersion}"
    shadow "org.apache.logging.log4j:log4j-api:${log4jVersion}"
    shadow "org.apache.logging.log4j:log4j-core:${log4jVersion}"

    shadow "org.apache.flink:flink-clients_${scalaBinaryVersion}:${flinkVersion}"
    shadow "org.apache.flink:flink-java:${flinkVersion}"
    shadow "org.apache.flink:flink-runtime:${flinkVersion}"
    shadow "org.apache.flink:flink-streaming-java_${scalaBinaryVersion}:${flinkVersion}"
    shadow "org.apache.flink:flink-streaming-scala_${scalaBinaryVersion}:${flinkVersion}"

    shadow "org.apache.flink:flink-runtime-web_${scalaBinaryVersion}:${flinkVersion}"
    shadow "org.apache.flink:flink-table-planner_${scalaBinaryVersion}:${flinkVersion}"
    shadow "org.apache.flink:flink-table-common:${flinkVersion}"
    shadow "org.apache.flink:flink-table-api-java-bridge_${scalaBinaryVersion}:${flinkVersion}"
    implementation "org.apache.flink:flink-connector-kafka_${scalaBinaryVersion}:${flinkVersion}"
    shadow "org.apache.flink:flink-sql-connector-kafka_${scalaBinaryVersion}:${flinkVersion}"
    shadow "org.apache.flink:flink-cep_${scalaBinaryVersion}:${flinkVersion}"
    implementation "org.apache.flink:flink-json:${flinkVersion}"

    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}"
    implementation "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}"

    implementation "com.github.knaufk:flink-faker:0.3.0"

    testImplementation "junit:junit:${junitVersion}"
    testImplementation "org.apache.flink:flink-test-utils-junit:${flinkVersion}"
    testImplementation 'org.assertj:assertj-core:3.20.2'
}

sourceSets {
    // Add shadow configuration to runtime class path so that the
    // dynamically-generated tasks by IntelliJ are able to run and have
    // all dependencies they need. (Luckily, this does not influence what
    // ends up in the final shadowJar.)
    main.runtimeClasspath += configurations.shadow

    test.compileClasspath += configurations.shadow
    test.runtimeClasspath += configurations.shadow
}

spotless {
    java {
        googleJavaFormat('1.7').aosp()

        // \# refers to static imports
        importOrder('org.apache.flink', 'org.apache.flink.shaded', '', 'javax', 'java', 'scala', '\\#')
        removeUnusedImports()

        targetExclude("**/generated*/*.java")
    }

    format 'misc', {
        // define the files to apply `misc` to
        target '*.gradle', '*.md', '.gitignore'

        // define the steps to apply to those files
        trimTrailingWhitespace()
        indentWithSpaces(4)
        endWithNewline()
    }
}

jar {
    manifest {
        attributes 'Built-By': System.getProperty('user.name'),
                'Build-Jdk': System.getProperty('java.version')
    }
}

shadowJar {
    mergeServiceFiles()
    dependencies {
        exclude(dependency("org.apache.flink:force-shading"))
        exclude(dependency('com.google.code.findbugs:jsr305'))
        exclude(dependency('org.slf4j:.*'))
        exclude(dependency('log4j:.*'))
        exclude(dependency('org.apache.logging.log4j:log4j-to-slf4j'))
        // already provided dependencies from serializer frameworks
        exclude(dependency('com.esotericsoftware.kryo:kryo'))
        exclude(dependency('javax.servlet:servlet-api')) // TODO: check if needed
        exclude(dependency('org.apache.httpcomponents:httpclient')) // TODO: check if needed
    }
}

assemble.dependsOn(shadowJar)
